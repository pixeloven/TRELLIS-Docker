# Main build for Docker Bake - Trellis Docker
FROM runtime AS base

# Create a g++ wrapper for JIT, since the include dirs are passed with -i rather than -I for some reason
RUN printf '#!/usr/bin/env bash\nexec /usr/bin/g++ -I/usr/local/cuda/include -I/usr/local/cuda/include/crt "$@"\n' > /usr/local/bin/gxx-wrapper && \
    chmod +x /usr/local/bin/gxx-wrapper

ENV CXX=/usr/local/bin/gxx-wrapper

ARG PUID=1000
ARG PGID=1000
RUN groupadd -g $PGID trellis && \
    useradd -m -u $PUID -g $PGID trellis

USER trellis

WORKDIR /home/trellis

# Use bash shell so we can source activate
SHELL ["/bin/bash", "--login", "-c"]

ENV VIRTUAL_ENV=/home/trellis/.venv
ENV XDG_CACHE_HOME=/home/trellis/.cache

RUN --mount=type=cache,target=~/.cache/pip \
  python -m venv $VIRTUAL_ENV && \
  source ~/.venv/bin/activate

ENV PATH="/home/trellis/.local/bin:$PATH"
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

WORKDIR /home/trellis/app

# Clone TRELLIS repo
RUN git clone --recurse-submodules --remote-submodules https://github.com/microsoft/TRELLIS.git .

# Install PyTorch ecosystem first (compatible versions)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install torch==2.5.0 torchvision==0.20.0 torchaudio==2.5.0 --index-url https://download.pytorch.org/whl/cu124

# Install basic dependencies (following TRELLIS setup.sh --basic)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install pillow imageio imageio-ffmpeg tqdm easydict opencv-python-headless scipy ninja rembg onnxruntime trimesh open3d xatlas pyvista pymeshfix igraph transformers && \
    pip install git+https://github.com/EasternJournalist/utils3d.git@9a4eb15e4021b67b12c460c7057d642626897ec8

# Install additional basic packages
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install onnx onnxscript packaging setuptools wheel plyfile

# Install xformers (compatible version for PyTorch 2.4.0 + CUDA 12.4)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install xformers==0.0.28.post2 --index-url https://download.pytorch.org/whl/cu124

# Install flash-attn
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install flash-attn --no-build-isolation

# Install Kaolin (compatible version for PyTorch 2.4.0)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install kaolin==0.17.0 -f https://nvidia-kaolin.s3.us-east-2.amazonaws.com/torch-2.5.0_cu124.html

# Install GPU-dependent packages (might need to install in post install)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install git+https://github.com/NVlabs/nvdiffrast.git

# Install GPU-dependent packages mipgaussian, diffoctreerast (might need to install in post install)
# RUN --mount=type=cache,target=~/.cache/pip \
#     source ~/.venv/bin/activate && \
#     mkdir -p /tmp/extensions && \
#     git clone --recurse-submodules https://github.com/JeffreyXiang/diffoctreerast.git /tmp/extensions/diffoctreerast && \
#     pip install /tmp/extensions/diffoctreerast && \
#     git clone https://github.com/autonomousvision/mip-splatting.git /tmp/extensions/mip-splatting && \
#     pip install /tmp/extensions/mip-splatting/submodules/diff-gaussian-rasterization/

# Install GPU-dependent spconv (might need to install in post install)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install spconv-cu124

# Install Gradio for the web interface (pinned to compatible version)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install gradio==4.44.1 gradio_litmodel3d==0.0.1

COPY --chown=trellis:trellis . .

# Clean up pip cache
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip cache purge && \
    rm -rf /tmp/* && \
    chmod +x startup.sh && \
    chmod +x post_install.sh && \
    chmod +x entrypoint.sh

ARG GRADIO_SERVER_PORT=7860
EXPOSE $GRADIO_SERVER_PORT

ARG GRADIO_SERVER_NAME="0.0.0.0"
ENV GRADIO_SERVER_NAME=$GRADIO_SERVER_NAME

ARG GRADIO_SHARE="False"
ENV GRADIO_SHARE=$GRADIO_SHARE

ARG GRADIO_ALLOWED_PATHS="*"
ENV GRADIO_ALLOWED_PATHS=$GRADIO_ALLOWED_PATHS

ENTRYPOINT ["./entrypoint.sh"]

# Launch TRELLIS directly
CMD ["bash", "startup.sh"]

