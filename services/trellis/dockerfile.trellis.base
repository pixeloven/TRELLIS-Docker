# Main build for Docker Bake - Trellis Docker
FROM runtime AS base

# Create a g++ wrapper for JIT, since the include dirs are passed with -i rather than -I for some reason
RUN printf '#!/usr/bin/env bash\nexec /usr/bin/g++ -I/usr/local/cuda/include -I/usr/local/cuda/include/crt "$@"\n' > /usr/local/bin/gxx-wrapper && \
    chmod +x /usr/local/bin/gxx-wrapper

ENV CXX=/usr/local/bin/gxx-wrapper

ARG PUID=1000
ARG PGID=1000
RUN groupadd -g $PGID trellis && \
    useradd -m -u $PUID -g $PGID trellis

USER trellis

WORKDIR /home/trellis

# Use bash shell so we can source activate
SHELL ["/bin/bash", "--login", "-c"]

ENV VIRTUAL_ENV=/home/trellis/.venv
ENV XDG_CACHE_HOME=/home/trellis/.cache

RUN --mount=type=cache,target=~/.cache/pip \
  python -m venv $VIRTUAL_ENV && \
  source ~/.venv/bin/activate

ENV PATH="/home/trellis/.local/bin:$PATH"
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

WORKDIR /home/trellis/app

# Clone TRELLIS repo
RUN git clone --recurse-submodules --remote-submodules https://github.com/microsoft/TRELLIS.git .

COPY --chown=trellis:trellis . .

# Install basic requirements first (without flash-attn)
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install numpy==1.24.3 && \
    pip install torch==2.4.0 torchaudio==2.4.0 torchvision==0.19.0 && \
    pip install onnx onnxscript packaging setuptools wheel && \
    pip install plyfile utils3d spconv xformers gradio

# Install GPU-dependent packages
RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    pip install diso && \
    pip install kaolin==0.17.0 -f https://nvidia-kaolin.s3.us-east-2.amazonaws.com/torch-2.4.0_cu124.html && \
    pip install flash-attn --no-build-isolation && \
    pip install git+https://github.com/NVlabs/nvdiffrast.git

RUN --mount=type=cache,target=~/.cache/pip \
    source ~/.venv/bin/activate && \
    ./setup.sh --basic --xformers --flash-attn --diffoctreerast --vox2seq --spconv --mipgaussian --kaolin --nvdiffrast --demo && \
    chmod +x startup.sh && \
    chmod +x post_install.sh && \
    chmod +x entrypoint.sh && \
    chmod +x launch_app.py && \
    pip cache purge

# Deduplicate with rdfind (optional)
# RUN rdfind -makesymlinks true /opt/conda

ENV GRADIO_SERVER_NAME="0.0.0.0"
ENV GRADIO_SERVER_PORT="7860"

ENTRYPOINT ["./entrypoint.sh"]

# Use launch_app.py to ensure Gradio binds to 0.0.0.0
CMD ["bash", "startup.sh"]

